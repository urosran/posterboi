{"version":3,"sources":["assets/hompageCover.jpg","Landing Pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","useStyles","makeStyles","theme","top","paddingTop","height","backgroundSize","backgroundRepeat","backgroundPosition","backgroundImage","backgroundColor","opacity","overflow","container","margin","minWidth","textAlign","coverImg","coverTxt","color","fontFamily","fontSize","boring","fontWeight","subTitleTxt","button","marginTop","animation","borderStyle","borderWidth","borderColor","borderRadius","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,0C,mGC+E5BC,G,0CA/DE,WAEGC,MAgEdA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,IAAK,CACDC,WAAY,OACZC,OAAQ,QACRC,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,aACpBC,gBAAiB,8IACjBC,gBAAiB,QACjBC,QAAS,GACTC,SAAU,UAEdC,UAAW,CACPC,OAAQ,GACRC,SAAU,OACVC,UAAW,SACXN,gBAAiB,yBAErBO,SAAU,CACNZ,OAAQ,SAEZa,SAAU,CACNC,MAAO,QACPC,WAAY,UACZC,SAAU,MAKVN,SAAU,GAEdO,OAAQ,CACJH,MAAO,QACPC,WAAY,gBACZC,SAAU,MACVE,WAAY,IACZR,SAAU,GAGdS,YAAa,CACTJ,WAAY,UACZD,MAAO,QACPE,SAAU,OAEdI,OAAQ,CACJN,MAAO,QACPE,SAAU,QACVD,WAAY,UACZM,UAAW,OACXhB,gBAAiB,QACjBiB,UAAW,YACXC,YAAa,SACbC,YAAa,EACbC,YAAa,QACbC,aAAc,OCzHPC,MAVf,WACE,OACI,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWrC,OCGzBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31f0cdf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hompageCover.6c6c6a5a.jpg\";","import React from 'react';\r\n//importing styles from our UI library\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n// assets from our UI library that help us build the\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Route} from \"react-router\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\n// TODO: for this to work we will create a folder called assets in src and place it here\r\n//  download any image and name it coverImg.jpg (www.unsplash.com is a great resource)\r\nimport coverImg from '../assets/hompageCover.jpg'\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nconst HomePage = () => {\r\n\r\n    const classes = useStyles(); // we are using the method to load our css we will declare later\r\n\r\n    return (\r\n        // defines a top level container (the one for the entire page)\r\n        <div className={classes.top}>\r\n            {/*CssBaseline is a very useful component that allows us to establish a baseline that we build on*/}\r\n            <CssBaseline/>\r\n\r\n            <Grid container\r\n                  alignContent={'center'} alignItems={'center'} // centers all content\r\n                  direction={'column'} // aligns everything in a column, could also be row\r\n                // adds a background image\r\n            >\r\n                {/*now we define another container for out buttons at the very top*/}\r\n                {/*<Grid container direction={'row'} alignContent={'flex-end'} alignItems={'flex-end'}>*/}\r\n                {/*    <Button disableRipple={true} className={classes.button}>Log In</Button>*/}\r\n                {/*    /!*This is how you can route the user from any component (explanation below)*!/*/}\r\n                {/*    <Route render={({history}) => (*/}\r\n                {/*        <Button disableRipple={true} // disables ripple effect on the button press*/}\r\n                {/*                className={classes.button} // this applies the styles we will define later*/}\r\n                {/*                on={() => history.push('./store')}>Shop</Button>)}/>*/}\r\n\r\n                {/*    <Button disableRipple={true} className={classes.button}>About</Button>*/}\r\n                {/*</Grid>*/}\r\n                <Grid container\r\n                      alignContent={'center'} alignItems={'center'} // centers all content\r\n                      direction={'column'} // aligns everything in a column, could also be row\r\n                >\r\n                    {/* make sure to wrap containerâ€™s children with <Grid item> tag*/}\r\n\r\n                    <Grid className={classes.container} // applies the CSS declared above\r\n                          item alignSelf={'center'}>\r\n                        <Typography className={classes.coverTxt}>Are you...\r\n                        </Typography>\r\n                        <Typography className={classes.boring}>...boring?</Typography>\r\n\r\n                    </Grid>\r\n                    <Slide direction=\"left\" in={true} timeout={1000} mountOnEnter unmountOnExit>\r\n\r\n                        <Grid className={classes.container} // applies the CSS declared above\r\n                              item alignSelf={'center'}>\r\n                            <Typography className={classes.subTitleTxt}>why should your walls be? </Typography>\r\n                        </Grid>\r\n                    </Slide>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container alignItems={\"center\"} direction={\"column\"}>\r\n\r\n                <Grid item alignSelf={'center'}>\r\n                    <Grow direction=\"up\" in={true} timeout={3000} mountOnEnter unmountOnExit>\r\n                        <Button className={classes.button} color={'secondary'} variant={\"contained\"}>\r\n                            click here for framed wall-art </Button>\r\n                    </Grow>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    top: {\r\n        paddingTop: '10vh',\r\n        height: '100vh', // our container will take the full height of the window\r\n        backgroundSize: 'cover', // stretch the image to fill the full width and height\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'top center',\r\n        backgroundImage: 'url(https://images.unsplash.com/photo-1453814235491-3cfac3999928?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80)',\r\n        backgroundColor: 'black',\r\n        opacity: 10,\r\n        overflow: \"hidden\"\r\n    },\r\n    container: {\r\n        margin: 20,\r\n        minWidth: '100%',\r\n        textAlign: \"center\",\r\n        backgroundColor: 'rgba(19, 20, 20, 0.7)',\r\n    },\r\n    coverImg: {\r\n        height: \"100vh\", // the image itself will take the full height of the window\r\n    },\r\n    coverTxt: {\r\n        color: 'white',\r\n        fontFamily: 'Knewave', // a custom font, look at the box below on how to import\r\n        fontSize: '3em',\r\n        // textFillColor: 'white',\r\n        // textStrokeWidth: 0.1,\r\n        // textStrokeColor: 'black',\r\n        // fontWeight: 100,\r\n        minWidth: 0,\r\n    },\r\n    boring: {\r\n        color: 'white',\r\n        fontFamily: 'TimesNewRoman', // a custom font, look at the box below on how to import\r\n        fontSize: '3em',\r\n        fontWeight: 1000,\r\n        minWidth: 0,\r\n    },\r\n\r\n    subTitleTxt: {\r\n        fontFamily: 'Knewave', // a custom font, look at the box below on how to import\r\n        color: 'white',\r\n        fontSize: '3em',\r\n    },\r\n    button: {\r\n        color: 'white',\r\n        fontSize: '1.2em',\r\n        fontFamily: 'Raleway', // a custom font, look at the box below on how to import\r\n        marginTop: \"10vh\",\r\n        backgroundColor: 'black',\r\n        animation: 'shake 10s',\r\n        borderStyle: 'double',\r\n        borderWidth: 3,\r\n        borderColor: 'white',\r\n        borderRadius: 0\r\n    }\r\n}))\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\n// we will create the component in a bit - it will show an error for the time being\r\nimport HomePage from \"./Landing Pages/HomePage\";\r\n\r\nfunction App() {\r\n  return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Route exact path={\"/\"} component={HomePage}/>\r\n        </div>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}